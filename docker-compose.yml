version: '3.7'

services:
  gateway:
    container_name: sm_be_gateway
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - 3001:3001
    environment:
      - SERVER_PORT=3001
      - RESOURCE_ADDRESS=haproxy:443
    depends_on:
      - resource
      - haproxy

  resource:
    container_name: sm_be_resource
    build:
      context: ./resource
      dockerfile: Dockerfile
    environment:
      - SERVER_PORT=3002

  haproxy:
    image: haproxy:$HAPROXY_VERSION
    container_name: sm_lb_haproxy
    volumes:
      - "./haproxy/config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
    ports:
      - "80:80"
    depends_on:
      - resource

  mariadb-master:
    image: mariadb:${MARIADB_VERSION}
    container_name: sm_db_master
    healthcheck:
      test: ["CMD", "sh", "-c", "mysqladmin ping -hlocalhost -p$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: "--character-set-server=utf8mb4"
    environment:
      - MYSQL_REPLICATION_MODE=master
      - MYSQL_REPLICATION_USER=repl_user
      - MYSQL_USER=root
      - MYSQL_DATABASE=service_mesh
      - MYSQL_ROOT_PASSWORD=password
      - ALLOW_EMPTY_PASSWORD=yes

  mariadb-slave:
    image: mariadb:${MARIADB_VERSION}
    container_name: sm_db_slave
    healthcheck:
      test: ["CMD", "sh", "-c", "mysqladmin ping -hlocalhost -p$MYSQL_ROOT_PASSWORD"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: "--character-set-server=utf8mb4"
    depends_on:
      - mariadb-master
    environment:
      - MYSQL_REPLICATION_MODE=slave
      - MYSQL_REPLICATION_USER=repl_user
      - MYSQL_USER=root
      - MYSQL_DATABASE=service_mesh
      - MYSQL_MASTER_HOST=mariadb-master
      - MYSQL_MASTER_PORT_NUMBER=3306
      - MYSQL_MASTER_ROOT_PASSWORD=password
      - MYSQL_ROOT_PASSWORD=password
      - ALLOW_EMPTY_PASSWORD=yes

  redis:
    image: redis:5.0.8-alpine
    container_name: sm_cache_redis
    healthcheck:
      test: ["CMD", "sh", "-c", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  consul-server:
    image: consul:${CONSUL_VERSION}
    container_name: sm_consul_server
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - ./consul/server/config/:/consul/config/
    command: "consul agent -config-dir=/consul/config/"

  consul-client:
    image: consul:${CONSUL_VERSION}
    container_name: sm_consul_client
    volumes:
      - ./consul/client/config/:/consul/config/
    command: "consul agent -config-dir=/consul/config/ -join=consul-server"
    depends_on:
      - consul-server

  vault:
    image: vault:1.3.4
    container_name: sm_vault

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    container_name: sm_mon_es
    volumes:
      - type: bind
        source: ./elk/elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks
      # see https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node

  logstash:
    image: docker.elastic.co/logstash/logstash:${ELK_VERSION}
    container_name: sm_mon_logstash
    volumes:
      - type: bind
        source: ./elk/logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./elk/logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    container_name: sm_mon_kibana
    volumes:
      - type: bind
        source: ./elk/kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

volumes:
  elasticsearch:
